Rcon:
        .string ""
        .ascii  "\001\002\004\b\020 @\200\0336"
        .long   4
        .long   4
        .long   10
Sbox:
        .string "c|w{\362ko\3050\001g+\376\327\253v\312\202\311}\372YG\360\255\324\242\257\234\244r\300\267\375\223&6?\367\3144\245\345\361q\3301\025\004\307#\303\030\226\005\232\007\022\200\342\353'\262u\t\203,\032\033nZ\240R;\326\263)\343/\204S\321"
        .ascii  "\355 \374\261[j\313\2769JLX\317\320\357\252\373CM3\205E\371\002"
        .ascii  "\177P<\237\250Q\243@\217\222\2358\365\274\266\332!\020\377\363"
        .ascii  "\322\315\f\023\354_\227D\027\304\247~=d]\031s`\201O\334\"*\220"
        .ascii  "\210F\356\270\024\336^\013\333\3402:\nI\006$\\\302\323\254b\221"
        .ascii  "\225\344y\347\3107m\215\325N\251lV\364\352ez\256\b\272x%.\034"
        .ascii  "\246\264\306\350\335t\037K\275\213\212p>\265fH\003\366\016a5"
        .ascii  "W\271\206\301\035\236\341\370\230\021i\331\216\224\233\036\207"
        .ascii  "\351\316U(\337\214\241\211\r\277\346BhA\231-\017\260T\273\026"
S(unsigned char):
        push    rbp
        mov     rbp, rsp
        mov     eax, edi
        mov     BYTE PTR [rbp-4], al
        movzx   eax, BYTE PTR [rbp-4]
        cdqe
        movzx   eax, BYTE PTR Sbox[rax]
        pop     rbp
        ret
keyexpansion(unsigned char const*, unsigned char*):
        push    rbp
        mov     rbp, rsp
        sub     rsp, 48
        mov     QWORD PTR [rbp-40], rdi
        mov     QWORD PTR [rbp-48], rsi
        mov     DWORD PTR [rbp-4], 0
        jmp     .L17
.L18:
        mov     eax, DWORD PTR [rbp-4]
        sal     eax, 2
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-40]
        add     rax, rdx
        mov     edx, DWORD PTR [rbp-4]
        sal     edx, 2
        movsx   rcx, edx
        mov     rdx, QWORD PTR [rbp-48]
        add     rdx, rcx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rdx], al
        mov     eax, DWORD PTR [rbp-4]
        sal     eax, 2
        cdqe
        lea     rdx, [rax+1]
        mov     rax, QWORD PTR [rbp-40]
        add     rax, rdx
        mov     edx, DWORD PTR [rbp-4]
        sal     edx, 2
        movsx   rdx, edx
        lea     rcx, [rdx+1]
        mov     rdx, QWORD PTR [rbp-48]
        add     rdx, rcx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rdx], al
        mov     eax, DWORD PTR [rbp-4]
        sal     eax, 2
        cdqe
        lea     rdx, [rax+2]
        mov     rax, QWORD PTR [rbp-40]
        add     rax, rdx
        mov     edx, DWORD PTR [rbp-4]
        sal     edx, 2
        movsx   rdx, edx
        lea     rcx, [rdx+2]
        mov     rdx, QWORD PTR [rbp-48]
        add     rdx, rcx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rdx], al
        mov     eax, DWORD PTR [rbp-4]
        sal     eax, 2
        cdqe
        lea     rdx, [rax+3]
        mov     rax, QWORD PTR [rbp-40]
        add     rax, rdx
        mov     edx, DWORD PTR [rbp-4]
        sal     edx, 2
        movsx   rdx, edx
        lea     rcx, [rdx+3]
        mov     rdx, QWORD PTR [rbp-48]
        add     rdx, rcx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rdx], al
        add     DWORD PTR [rbp-4], 1
.L17:
        cmp     DWORD PTR [rbp-4], 3
        jle     .L18
        mov     DWORD PTR [rbp-8], 4
        jmp     .L19
.L23:
        mov     DWORD PTR [rbp-12], 0
        jmp     .L20
.L21:
        mov     eax, DWORD PTR [rbp-8]
        sub     eax, 1
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-12]
        add     eax, edx
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        movzx   edx, BYTE PTR [rax]
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        mov     BYTE PTR [rbp-17+rax], dl
        add     DWORD PTR [rbp-12], 1
.L20:
        cmp     DWORD PTR [rbp-12], 3
        jle     .L21
        mov     eax, DWORD PTR [rbp-8]
        and     eax, 3
        test    eax, eax
        jne     .L22
        movzx   eax, BYTE PTR [rbp-17]
        mov     BYTE PTR [rbp-13], al
        movzx   eax, BYTE PTR [rbp-16]
        movzx   eax, al
        mov     edi, eax
        call    S(unsigned char)
        mov     ecx, eax
        mov     eax, DWORD PTR [rbp-8]
        lea     edx, [rax+3]
        test    eax, eax
        cmovs   eax, edx
        sar     eax, 2
        cdqe
        movzx   eax, BYTE PTR Rcon[rax]
        xor     eax, ecx
        mov     BYTE PTR [rbp-17], al
        movzx   eax, BYTE PTR [rbp-15]
        movzx   eax, al
        mov     edi, eax
        call    S(unsigned char)
        mov     BYTE PTR [rbp-16], al
        movzx   eax, BYTE PTR [rbp-14]
        movzx   eax, al
        mov     edi, eax
        call    S(unsigned char)
        mov     BYTE PTR [rbp-15], al
        movzx   eax, BYTE PTR [rbp-13]
        mov     edi, eax
        call    S(unsigned char)
        mov     BYTE PTR [rbp-14], al
.L22:
        mov     eax, DWORD PTR [rbp-8]
        sub     eax, 4
        sal     eax, 2
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        movzx   esi, BYTE PTR [rax]
        movzx   ecx, BYTE PTR [rbp-17]
        mov     eax, DWORD PTR [rbp-8]
        sal     eax, 2
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        xor     esi, ecx
        mov     edx, esi
        mov     BYTE PTR [rax], dl
        mov     eax, DWORD PTR [rbp-8]
        sub     eax, 4
        sal     eax, 2
        cdqe
        lea     rdx, [rax+1]
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        movzx   esi, BYTE PTR [rax]
        movzx   ecx, BYTE PTR [rbp-16]
        mov     eax, DWORD PTR [rbp-8]
        sal     eax, 2
        cdqe
        lea     rdx, [rax+1]
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        xor     esi, ecx
        mov     edx, esi
        mov     BYTE PTR [rax], dl
        mov     eax, DWORD PTR [rbp-8]
        sub     eax, 4
        sal     eax, 2
        cdqe
        lea     rdx, [rax+2]
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        movzx   esi, BYTE PTR [rax]
        movzx   ecx, BYTE PTR [rbp-15]
        mov     eax, DWORD PTR [rbp-8]
        sal     eax, 2
        cdqe
        lea     rdx, [rax+2]
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        xor     esi, ecx
        mov     edx, esi
        mov     BYTE PTR [rax], dl
        mov     eax, DWORD PTR [rbp-8]
        sub     eax, 4
        sal     eax, 2
        cdqe
        lea     rdx, [rax+3]
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        movzx   esi, BYTE PTR [rax]
        movzx   ecx, BYTE PTR [rbp-14]
        mov     eax, DWORD PTR [rbp-8]
        sal     eax, 2
        cdqe
        lea     rdx, [rax+3]
        mov     rax, QWORD PTR [rbp-48]
        add     rax, rdx
        xor     esi, ecx
        mov     edx, esi
        mov     BYTE PTR [rax], dl
        add     DWORD PTR [rbp-8], 1
.L19:
        cmp     DWORD PTR [rbp-8], 43
        jle     .L23
        nop
        nop
        leave
        ret
SubBytes(unsigned char*):
        push    rbp
        mov     rbp, rsp
        push    rbx
        sub     rsp, 24
        mov     QWORD PTR [rbp-32], rdi
        mov     DWORD PTR [rbp-12], 0
        jmp     .L25
.L26:
        mov     eax, DWORD PTR [rbp-12]
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        movzx   eax, BYTE PTR [rax]
        movzx   eax, al
        mov     edx, DWORD PTR [rbp-12]
        movsx   rcx, edx
        mov     rdx, QWORD PTR [rbp-32]
        lea     rbx, [rcx+rdx]
        mov     edi, eax
        call    S(unsigned char)
        mov     BYTE PTR [rbx], al
        add     DWORD PTR [rbp-12], 1
.L25:
        cmp     DWORD PTR [rbp-12], 15
        jle     .L26
        nop
        nop
        mov     rbx, QWORD PTR [rbp-8]
        leave
        ret
ShiftRows(unsigned char*):
        push    rbp
        mov     rbp, rsp
        mov     QWORD PTR [rbp-24], rdi
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+1]
        mov     BYTE PTR [rbp-4], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+5]
        mov     BYTE PTR [rbp-3], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+9]
        mov     BYTE PTR [rbp-2], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+13]
        mov     BYTE PTR [rbp-1], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+1]
        movzx   eax, BYTE PTR [rbp-3]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+5]
        movzx   eax, BYTE PTR [rbp-2]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+9]
        movzx   eax, BYTE PTR [rbp-1]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+13]
        movzx   eax, BYTE PTR [rbp-4]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+2]
        mov     BYTE PTR [rbp-4], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+6]
        mov     BYTE PTR [rbp-3], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+10]
        mov     BYTE PTR [rbp-2], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+14]
        mov     BYTE PTR [rbp-1], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+2]
        movzx   eax, BYTE PTR [rbp-2]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+6]
        movzx   eax, BYTE PTR [rbp-1]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+10]
        movzx   eax, BYTE PTR [rbp-4]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+14]
        movzx   eax, BYTE PTR [rbp-3]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+3]
        mov     BYTE PTR [rbp-4], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+7]
        mov     BYTE PTR [rbp-3], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+11]
        mov     BYTE PTR [rbp-2], al
        mov     rax, QWORD PTR [rbp-24]
        movzx   eax, BYTE PTR [rax+15]
        mov     BYTE PTR [rbp-1], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+3]
        movzx   eax, BYTE PTR [rbp-1]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+7]
        movzx   eax, BYTE PTR [rbp-4]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+11]
        movzx   eax, BYTE PTR [rbp-3]
        mov     BYTE PTR [rdx], al
        mov     rax, QWORD PTR [rbp-24]
        lea     rdx, [rax+15]
        movzx   eax, BYTE PTR [rbp-2]
        mov     BYTE PTR [rdx], al
        nop
        pop     rbp
        ret
gf_mul(unsigned char, unsigned char):
        push    rbp
        mov     rbp, rsp
        mov     edx, edi
        mov     eax, esi
        mov     BYTE PTR [rbp-20], dl
        mov     BYTE PTR [rbp-24], al
        mov     BYTE PTR [rbp-1], 0
        mov     DWORD PTR [rbp-8], 0
        jmp     .L29
.L32:
        movzx   eax, BYTE PTR [rbp-24]
        and     eax, 1
        test    eax, eax
        je      .L30
        movzx   eax, BYTE PTR [rbp-20]
        xor     BYTE PTR [rbp-1], al
.L30:
        movzx   eax, BYTE PTR [rbp-20]
        and     eax, -128
        mov     BYTE PTR [rbp-9], al
        sal     BYTE PTR [rbp-20]
        cmp     BYTE PTR [rbp-9], 0
        je      .L31
        xor     BYTE PTR [rbp-20], 27
.L31:
        shr     BYTE PTR [rbp-24]
        add     DWORD PTR [rbp-8], 1
.L29:
        cmp     DWORD PTR [rbp-8], 7
        jle     .L32
        movzx   eax, BYTE PTR [rbp-1]
        pop     rbp
        ret
MixColumns(unsigned char*):
        push    rbp
        mov     rbp, rsp
        push    rbx
        sub     rsp, 24
        mov     QWORD PTR [rbp-32], rdi
        mov     DWORD PTR [rbp-12], 0
        jmp     .L35
.L36:
        mov     eax, DWORD PTR [rbp-12]
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rbp-13], al
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        lea     rdx, [rax+1]
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rbp-14], al
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        lea     rdx, [rax+2]
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rbp-15], al
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        lea     rdx, [rax+3]
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        movzx   eax, BYTE PTR [rax]
        mov     BYTE PTR [rbp-16], al
        movzx   eax, BYTE PTR [rbp-13]
        mov     esi, 2
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ebx, eax
        movzx   eax, BYTE PTR [rbp-14]
        mov     esi, 3
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-15]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-16]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ecx, eax
        mov     eax, DWORD PTR [rbp-12]
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        mov     edx, ebx
        xor     edx, ecx
        mov     BYTE PTR [rax], dl
        movzx   eax, BYTE PTR [rbp-13]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ebx, eax
        movzx   eax, BYTE PTR [rbp-14]
        mov     esi, 2
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-15]
        mov     esi, 3
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-16]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ecx, eax
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        lea     rdx, [rax+1]
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        xor     ebx, ecx
        mov     edx, ebx
        mov     BYTE PTR [rax], dl
        movzx   eax, BYTE PTR [rbp-13]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ebx, eax
        movzx   eax, BYTE PTR [rbp-14]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-15]
        mov     esi, 2
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-16]
        mov     esi, 3
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ecx, eax
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        lea     rdx, [rax+2]
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        mov     edx, ebx
        xor     edx, ecx
        mov     BYTE PTR [rax], dl
        movzx   eax, BYTE PTR [rbp-13]
        mov     esi, 3
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ebx, eax
        movzx   eax, BYTE PTR [rbp-14]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-15]
        mov     esi, 1
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        xor     ebx, eax
        movzx   eax, BYTE PTR [rbp-16]
        mov     esi, 2
        mov     edi, eax
        call    gf_mul(unsigned char, unsigned char)
        mov     ecx, eax
        mov     eax, DWORD PTR [rbp-12]
        cdqe
        lea     rdx, [rax+3]
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        xor     ebx, ecx
        mov     edx, ebx
        mov     BYTE PTR [rax], dl
        add     DWORD PTR [rbp-12], 4
.L35:
        cmp     DWORD PTR [rbp-12], 15
        jle     .L36
        nop
        nop
        mov     rbx, QWORD PTR [rbp-8]
        leave
        ret
AddRoundKey(unsigned char*, unsigned char*, int):
        push    rbp
        mov     rbp, rsp
        mov     QWORD PTR [rbp-24], rdi
        mov     QWORD PTR [rbp-32], rsi
        mov     DWORD PTR [rbp-36], edx
        mov     DWORD PTR [rbp-4], 0
        jmp     .L38
.L41:
        mov     DWORD PTR [rbp-8], 0
        jmp     .L39
.L40:
        mov     eax, DWORD PTR [rbp-8]
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-4]
        add     eax, edx
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-24]
        add     rax, rdx
        movzx   esi, BYTE PTR [rax]
        mov     eax, DWORD PTR [rbp-36]
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-4]
        add     eax, edx
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-8]
        add     eax, edx
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-32]
        add     rax, rdx
        movzx   ecx, BYTE PTR [rax]
        mov     eax, DWORD PTR [rbp-8]
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-4]
        add     eax, edx
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-24]
        add     rax, rdx
        xor     esi, ecx
        mov     edx, esi
        mov     BYTE PTR [rax], dl
        add     DWORD PTR [rbp-8], 1
.L39:
        cmp     DWORD PTR [rbp-8], 3
        jle     .L40
        add     DWORD PTR [rbp-4], 1
.L38:
        cmp     DWORD PTR [rbp-4], 3
        jle     .L41
        nop
        nop
        pop     rbp
        ret
aes_encrypt(unsigned char*, unsigned char*, unsigned char*):
        push    rbp
        mov     rbp, rsp
        sub     rsp, 80
        mov     QWORD PTR [rbp-56], rdi
        mov     QWORD PTR [rbp-64], rsi
        mov     QWORD PTR [rbp-72], rdx
        mov     DWORD PTR [rbp-4], 0
        jmp     .L43
.L46:
        mov     DWORD PTR [rbp-8], 0
        jmp     .L44
.L45:
        mov     eax, DWORD PTR [rbp-4]
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-8]
        add     eax, edx
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-56]
        add     rax, rdx
        mov     edx, DWORD PTR [rbp-8]
        lea     ecx, [0+rdx*4]
        mov     edx, DWORD PTR [rbp-4]
        add     ecx, edx
        movzx   edx, BYTE PTR [rax]
        movsx   rax, ecx
        mov     BYTE PTR [rbp-48+rax], dl
        add     DWORD PTR [rbp-8], 1
.L44:
        cmp     DWORD PTR [rbp-8], 3
        jle     .L45
        add     DWORD PTR [rbp-4], 1
.L43:
        cmp     DWORD PTR [rbp-4], 3
        jle     .L46
        mov     rcx, QWORD PTR [rbp-72]
        lea     rax, [rbp-48]
        mov     edx, 0
        mov     rsi, rcx
        mov     rdi, rax
        call    AddRoundKey(unsigned char*, unsigned char*, int)
        mov     DWORD PTR [rbp-12], 1
        jmp     .L47
.L48:
        lea     rax, [rbp-48]
        mov     rdi, rax
        call    ShiftRows(unsigned char*)
        lea     rax, [rbp-48]
        mov     rdi, rax
        call    MixColumns(unsigned char*)
        mov     edx, DWORD PTR [rbp-12]
        mov     rcx, QWORD PTR [rbp-72]
        lea     rax, [rbp-48]
        mov     rsi, rcx
        mov     rdi, rax
        call    AddRoundKey(unsigned char*, unsigned char*, int)
        add     DWORD PTR [rbp-12], 1
.L47:
        cmp     DWORD PTR [rbp-12], 2
        jle     .L48
        lea     rax, [rbp-48]
        mov     rdi, rax
        call    SubBytes(unsigned char*)
        lea     rax, [rbp-48]
        mov     rdi, rax
        call    ShiftRows(unsigned char*)
        mov     rcx, QWORD PTR [rbp-72]
        lea     rax, [rbp-48]
        mov     edx, 10
        mov     rsi, rcx
        mov     rdi, rax
        call    AddRoundKey(unsigned char*, unsigned char*, int)
        mov     DWORD PTR [rbp-16], 0
        jmp     .L49
.L52:
        mov     DWORD PTR [rbp-20], 0
        jmp     .L50
.L51:
        mov     eax, DWORD PTR [rbp-20]
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-16]
        lea     ecx, [rdx+rax]
        mov     eax, DWORD PTR [rbp-16]
        lea     edx, [0+rax*4]
        mov     eax, DWORD PTR [rbp-20]
        add     eax, edx
        movsx   rdx, eax
        mov     rax, QWORD PTR [rbp-64]
        add     rdx, rax
        movsx   rax, ecx
        movzx   eax, BYTE PTR [rbp-48+rax]
        mov     BYTE PTR [rdx], al
        add     DWORD PTR [rbp-20], 1
.L50:
        cmp     DWORD PTR [rbp-20], 3
        jle     .L51
        add     DWORD PTR [rbp-16], 1
.L49:
        cmp     DWORD PTR [rbp-16], 3
        jle     .L52
        nop
        nop
        leave
        ret
.LC0:
        .string "\345\216\237\346\226\207\344\270\272\357\274\232 "
.LC1:
        .string " "
.LC2:
        .string "\345\257\206\346\226\207\344\270\272\357\274\232 "
main:
        push    rbp
        mov     rbp, rsp
        sub     rsp, 272
        movabs  rax, 3760840147373010994
        movabs  rdx, 289077005208596785
        mov     QWORD PTR [rbp-64], rax
        mov     QWORD PTR [rbp-56], rdx
        movabs  rax, 506097522914230528
        movabs  rdx, 1084818905618843912
        mov     QWORD PTR [rbp-80], rax
        mov     QWORD PTR [rbp-72], rdx
        mov     QWORD PTR [rbp-256], 0
        mov     QWORD PTR [rbp-248], 0
        mov     QWORD PTR [rbp-240], 0
        mov     QWORD PTR [rbp-232], 0
        mov     QWORD PTR [rbp-224], 0
        mov     QWORD PTR [rbp-216], 0
        mov     QWORD PTR [rbp-208], 0
        mov     QWORD PTR [rbp-200], 0
        mov     QWORD PTR [rbp-192], 0
        mov     QWORD PTR [rbp-184], 0
        mov     QWORD PTR [rbp-176], 0
        mov     QWORD PTR [rbp-168], 0
        mov     QWORD PTR [rbp-160], 0
        mov     QWORD PTR [rbp-152], 0
        mov     QWORD PTR [rbp-144], 0
        mov     QWORD PTR [rbp-136], 0
        mov     QWORD PTR [rbp-128], 0
        mov     QWORD PTR [rbp-120], 0
        mov     QWORD PTR [rbp-112], 0
        mov     QWORD PTR [rbp-104], 0
        mov     QWORD PTR [rbp-96], 0
        mov     QWORD PTR [rbp-88], 0
        mov     QWORD PTR [rbp-272], 0
        mov     QWORD PTR [rbp-264], 0
        lea     rdx, [rbp-256]
        lea     rax, [rbp-64]
        mov     rsi, rdx
        mov     rdi, rax
        call    keyexpansion(unsigned char const*, unsigned char*)
        lea     rdx, [rbp-256]
        lea     rcx, [rbp-272]
        lea     rax, [rbp-80]
        mov     rsi, rcx
        mov     rdi, rax
        call    aes_encrypt(unsigned char*, unsigned char*, unsigned char*)
        mov     esi, OFFSET FLAT:.LC0
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        mov     esi, OFFSET FLAT:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
        mov     DWORD PTR [rbp-4], 0
        jmp     .L54
.L58:
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        movzx   eax, BYTE PTR [rbp-80+rax]
        cmp     al, 15
        ja      .L55
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        movzx   eax, BYTE PTR [rbp-80+rax]
        movzx   edx, al
        lea     rax, [rbp-40]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::bitset<8ul>::bitset(unsigned long long) [complete object constructor]
        lea     rax, [rbp-40]
        mov     rsi, rax
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, 8ul>(std::basic_ostream<char, std::char_traits<char> >&, std::bitset<8ul> const&)
        mov     esi, OFFSET FLAT:.LC1
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        jmp     .L56
.L55:
        mov     eax, DWORD PTR [rbp-4]
        cdqe
        movzx   eax, BYTE PTR [rbp-80+rax]
        movzx   edx, al
        lea     rax, [rbp-32]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::bitset<8ul>::bitset(unsigned long long) [complete object constructor]
        lea     rax, [rbp-32]
        mov     rsi, rax
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, 8ul>(std::basic_ostream<char, std::char_traits<char> >&, std::bitset<8ul> const&)
        mov     esi, OFFSET FLAT:.LC1
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
.L56:
        mov     edx, DWORD PTR [rbp-4]
        mov     eax, edx
        sar     eax, 31
        shr     eax, 30
        add     edx, eax
        and     edx, 3
        sub     edx, eax
        mov     eax, edx
        cmp     eax, 3
        jne     .L57
        mov     esi, OFFSET FLAT:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
.L57:
        add     DWORD PTR [rbp-4], 1
.L54:
        cmp     DWORD PTR [rbp-4], 15
        jle     .L58
        mov     esi, OFFSET FLAT:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
        mov     esi, OFFSET FLAT:.LC2
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        mov     esi, OFFSET FLAT:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
        mov     DWORD PTR [rbp-8], 0
        jmp     .L59
.L63:
        mov     eax, DWORD PTR [rbp-8]
        cdqe
        movzx   eax, BYTE PTR [rbp-272+rax]
        cmp     al, 15
        ja      .L60
        mov     eax, DWORD PTR [rbp-8]
        cdqe
        movzx   eax, BYTE PTR [rbp-272+rax]
        movzx   edx, al
        lea     rax, [rbp-24]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::bitset<8ul>::bitset(unsigned long long) [complete object constructor]
        lea     rax, [rbp-24]
        mov     rsi, rax
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, 8ul>(std::basic_ostream<char, std::char_traits<char> >&, std::bitset<8ul> const&)
        mov     esi, OFFSET FLAT:.LC1
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
        jmp     .L61
.L60:
        mov     eax, DWORD PTR [rbp-8]
        cdqe
        movzx   eax, BYTE PTR [rbp-272+rax]
        movzx   edx, al
        lea     rax, [rbp-16]
        mov     rsi, rdx
        mov     rdi, rax
        call    std::bitset<8ul>::bitset(unsigned long long) [complete object constructor]
        lea     rax, [rbp-16]
        mov     rsi, rax
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <char, std::char_traits<char>, 8ul>(std::basic_ostream<char, std::char_traits<char> >&, std::bitset<8ul> const&)
        mov     esi, OFFSET FLAT:.LC1
        mov     rdi, rax
        call    std::basic_ostream<char, std::char_traits<char> >& std::operator<< <std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*)
.L61:
        mov     edx, DWORD PTR [rbp-8]
        mov     eax, edx
        sar     eax, 31
        shr     eax, 30
        add     edx, eax
        and     edx, 3
        sub     edx, eax
        mov     eax, edx
        cmp     eax, 3
        jne     .L62
        mov     esi, OFFSET FLAT:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
.L62:
        add     DWORD PTR [rbp-8], 1
.L59:
        cmp     DWORD PTR [rbp-8], 15
        jle     .L63
        mov     esi, OFFSET FLAT:_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
        mov     edi, OFFSET FLAT:_ZSt4cout
        call    std::basic_ostream<char, std::char_traits<char> >::operator<<(std::basic_ostream<char, std::char_traits<char> >& (*)(std::basic_ostream<char, std::char_traits<char> >&))
        mov     eax, 0
        leave
        ret