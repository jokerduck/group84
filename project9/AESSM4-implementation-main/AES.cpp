#include<iostream>
#include<bitset>
using namespace std;
typedef unsigned char byte;
const byte Rcon[11] =
{
	0x00,0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,0x1b,0x36
};
const int Nb = 4;//列数
const int Nk = 4;//密钥字数
const int Nr = 10;//轮数
const byte Sbox[256] =
{
	0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5,
	0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
	0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0,
	0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
	0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc,
	0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
	0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a,
	0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
	0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0,
	0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
	0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b,
	0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
	0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85,
	0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
	0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5,
	0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
	0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17,
	0xc4, 0xa7, 0x7e, 0x3d,0x64, 0x5d, 0x19, 0x73,
	0x60, 0x81, 0x4f, 0xdc,0x22, 0x2a, 0x90, 0x88,
	0x46, 0xee, 0xb8, 0x14,0xde, 0x5e, 0x0b, 0xdb,
	0xe0, 0x32, 0x3a, 0x0a,0x49, 0x06, 0x24, 0x5c,
	0xc2, 0xd3, 0xac, 0x62,0x91, 0x95, 0xe4, 0x79,
	 0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9,
	 0x6c, 0x56, 0xf4, 0xea,0x65, 0x7a, 0xae, 0x08,
	0xba, 0x78, 0x25, 0x2e,0x1c, 0xa6, 0xb4, 0xc6,
	0xe8, 0xdd, 0x74, 0x1f,0x4b, 0xbd, 0x8b, 0x8a,
	0x70, 0x3e, 0xb5, 0x66,0x48, 0x03, 0xf6, 0x0e,
	0x61, 0x35, 0x57, 0xb9,0x86, 0xc1, 0x1d, 0x9e,
	0xe1, 0xf8, 0x98, 0x11,0x69, 0xd9, 0x8e, 0x94,
	0x9b, 0x1e, 0x87, 0xe9,0xce, 0x55, 0x28, 0xdf,
	0x8c, 0xa1, 0x89, 0x0d,0xbf, 0xe6, 0x42, 0x68,
	0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
};
byte S(byte b)
{
	return Sbox[b];
}
//密钥扩展算法
void keyexpansion(const byte* key, byte* RoundKey)
{
	for (int i = 0; i < Nk; i++)
	{
		RoundKey[4 * i] = key[4 * i];
		RoundKey[4 * i + 1] = key[4 * i + 1];
		RoundKey[4 * i + 2] = key[4 * i + 2];
		RoundKey[4 * i + 3] = key[4 * i + 3];
	}
	for (int i = Nk; i < Nb * (Nr + 1); i++)
	{
		byte temp[4];
		for (int j = 0; j < 4; j++)
		{
			temp[j] = RoundKey[4 * (i - 1) + j];
		}
		if (i % Nk == 0) {
			byte t = temp[0];//进行移位操作
			temp[0] = S(temp[1]) ^ Rcon[i / Nk];//对Rcon进行异或
			temp[1] = S(temp[2]);
			temp[2] = S(temp[3]);
			temp[3] = S(t);
		}
		RoundKey[4 * i + 0] = RoundKey[4 * (i - Nk) + 0] ^ temp[0];
		RoundKey[4 * i + 1] = RoundKey[4 * (i - Nk) + 1] ^ temp[1];
		RoundKey[4 * i + 2] = RoundKey[4 * (i - Nk) + 2] ^ temp[2];
		RoundKey[4 * i + 3] = RoundKey[4 * (i - Nk) + 3] ^ temp[3];
	}
}
// SubBytes变换
void SubBytes(byte* state) {
	for (int i = 0; i < 4 * Nb; i++)
	{
		state[i] = S(state[i]);
	}
}
void ShiftRows(byte* state) {
	byte temp[4];
	// 第二行左移1个字节
	temp[0] = state[1];
	temp[1] = state[5];
	temp[2] = state[9];
	temp[3] = state[13];
	state[1] = temp[1];
	state[5] = temp[2];
	state[9] = temp[3];
	state[13] = temp[0];
	// 第三行左移2个字节
	temp[0] = state[2];
	temp[1] = state[6];
	temp[2] = state[10];
	temp[3] = state[14];
	state[2] = temp[2];
	state[6] = temp[3];
	state[10] = temp[0];
	state[14] = temp[1];
	// 第四行左移3个字节
	temp[0] = state[3];
	temp[1] = state[7];
	temp[2] = state[11];
	temp[3] = state[15];
	state[3] = temp[3];
	state[7] = temp[0];
	state[11] = temp[1];
	state[15] = temp[2];
}
// MixColumns变换中使用的常量
const byte MixColumnsMatrix[4][4] = {
	{0x02, 0x03, 0x01, 0x01},
	{0x01, 0x02, 0x03, 0x01},
	{0x01, 0x01, 0x02, 0x03},
	{0x03, 0x01, 0x01, 0x02}
};
unsigned char gf_mul(unsigned char a, unsigned char b)
{
	unsigned char p = 0;
	unsigned char hi_bit_set;
	for (int i = 0; i < 8; i++) {
		if (b & 1) {
			p ^= a;
		}
		hi_bit_set = (a & 0x80);
		a <<= 1;
		if (hi_bit_set) {
			a ^= 0x1B;
		}
		b >>= 1;
	}
	return p;
}
void MixColumns(byte* state) {
	for (int i = 0; i < 16; i += 4) {
		unsigned char s0 = state[i];
		unsigned char s1 = state[i + 1];
		unsigned char s2 = state[i + 2];
		unsigned char s3 = state[i + 3];

		state[i] = (unsigned char)(gf_mul(s0, 0x02) ^ gf_mul(s1, 0x03) ^ gf_mul(s2, 0x01) ^ gf_mul(s3, 0x01));
		state[i + 1] = (unsigned char)(gf_mul(s0, 0x01) ^ gf_mul(s1, 0x02) ^ gf_mul(s2, 0x03) ^ gf_mul(s3, 0x01));
		state[i + 2] = (unsigned char)(gf_mul(s0, 0x01) ^ gf_mul(s1, 0x01) ^ gf_mul(s2, 0x02) ^ gf_mul(s3, 0x03));
		state[i + 3] = (unsigned char)(gf_mul(s0, 0x03) ^ gf_mul(s1, 0x01) ^ gf_mul(s2, 0x01) ^ gf_mul(s3, 0x02));
	}
}

// 轮密钥加变换
void AddRoundKey(byte* state, byte* w, int round) {
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			state[i + j * 4] ^= w[(round * Nb * 4) + (i * 4) + j];
		}
	}
}
void aes_encrypt(byte* in, byte* out, byte* w) {
	byte state[4 * 4];
	// 将输入转换为状态矩阵
	for (int i = 0; i < 4; i++) {
		for (int j = 0; j < 4; j++) {
			state[j * 4 + i] = in[i * 4 + j];
		}
	}

	// 初始轮密钥加
	AddRoundKey(state, w, 0);
	// Nr-1 轮变换
	for (int round = 1; round < 3; round++) {
		//cout << "第" << round << "次轮函数加密结果为：";
		//SubBytes(state);
		ShiftRows(state);
		MixColumns(state);
		AddRoundKey(state, w, round);
		/*for (int i = 0; i < 16; i++)
		{
			if (int(state[i]) < 16)
			{
				cout << "0x0" << hex << int(state[i]) << " ";
			}
			else
			{
				cout << "0x" << hex << int(state[i]) << " ";
			}
		}*/
		//cout << endl;
	}

	// 最后一轮变换（没有列混淆）
	//cout << "第10次轮函数加密结果为：";
	SubBytes(state);
	ShiftRows(state);
	AddRoundKey(state, w, Nr);
	//cout << endl;
	// 将状态矩阵转换为输出
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 4; j++) {
			out[i * 4 + j] = state[j * 4 + i];
		}
	}
}
int main()
{
	byte key[] = {
		0x32,0x30,0x32,0x31,0x30,0x30,0x31,0x34,0x31,0x31,0x31,0x30,0x01,0x02,0x03,0x04
	};
	byte state1[] = {
		0x02,0x00,0x02,0x01,0x00,0x00,0x01,0x04,0x01,0x01,0x01,0x00,0x0c,0x0d,0x0e,0x0f
	};
	byte RoundKey[4 * (Nr + 1) * Nk] = { 0 };
	byte out[16] = { 0 };
	keyexpansion(key, RoundKey);
	cout << "原文为： " << endl;
	for (int i = 0; i < 16; i++)
	{
		cout << int(state1[i])<<" ";
	}
	cout << endl;
	aes_encrypt(state1, out, RoundKey);
	cout << "密文为： " << endl;
	for (int i = 0; i < 16; i++)
	{
		cout << int(out[i])<<" ";
	}
	cout << endl;
	return 0;
}